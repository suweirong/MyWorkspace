?????????????O(N*logN)????????????,???????,?????????----????????,?????????????,?????,?????IT????????,????????????????,????????????????
????,??????????????????,??????????????????????,??????????,??????,?????
 
?????C.R.A.Hoare?1962????????????????????????,????????(Divide-and-ConquerMethod)?
?????????:
1.????????????????
2.????,???????????????,????????????????
3.???????????,???????????
 
???????????,????????????????????????????????????????????:????+???:
??????,???????(?????????????,???????????)?
 
?????????,????????????
0	1	2	3	4	5	6	7	8	9
72	6	57	88	60	42	83	73	48	85
???,i = 0;  j = 9;   X = a[i] = 72
?????a[0]??????X?,????????a[0]?????,?????????????
?j????????X????X????j=8,????,?a[8]?????????a[0]??a[0]=a[8]; i++;  ?????a[0]?????,?????????a[8],????????,??????a[8]???????i?????????X??,?i=3,????,?a[3]??????????a[8]=a[3]; j--;
 
????:
0	1	2	3	4	5	6	7	8	9
48	6	57	88	60	42	83	73	88	85
 i = 3;   j = 7;   X=72
????????,??????,???????
?j?????,?j=5,????,?a[5]?????????,a[3] = a[5]; i++;
?i?????,?i=5?,??i==j???
??,i = j = 5,?a[5]?????????,???X??a[5]?
????:
0	1	2	3	4	5	6	7	8	9
48	6	57	42	60	72	83	73	88	85
????a[5]?????????,a[5]??????????????a[0…4]?a[6…9]?????????????????
?????????
1.i =L; j = R; ????????????a[i]?
2.j--??????????,????????????a[i]??
3.i++??????????,??????????????a[j]??
4.?????2,3??,??i==j,??????a[i]??
 
?????:
Java??  
1.package quickSort;  
2.  
3.import java.util.Arrays;  
4.  
5./** 
6. *  
7. * @author Loulijun 
8. * ???????:???+?????? 
9. * 1??????????????????,???????? 
10. * 2?????,???????????????????,??????????????? 
11. * 3???????????????,??????????????????? 
12. *  
13. * ??????????????,????????????????????????? 
14. * ?????,????????????????????????????,????????? 
15. */  
16.public class QuickSort {  
17.    public static void main(String args[])  
18.    {  
19.        int array[]={49,38,65,97,76,13,27,49};  
20.        System.out.println(Arrays.toString(array));  
21.        quickSort(array,0,array.length-1);  
22.        System.out.println(Arrays.toString(array));  
23.    }  
24.    /** 
25.     * ????:??????????????,???????????????????? 
26.     * @param arr ?????? 
27.     * @param low ???????,?????? 
28.     * @param high ???????,?????? 
29.     */  
30.    public static void quickSort(int arr[],int low,int high)  
31.    {  
32.        if(low<high)  
33.        {  
34.            int mid = partition(arr,low,high);  
35.            //???????????????  
36.            quickSort(arr,low,mid-1);  
37.            //???????????????  
38.            quickSort(arr,mid+1,high);  
39.        }  
40.    }  
41.    /** 
42.     * ????,??????????,??????????????????????, 
43.     * ??????????? 
44.     * @param array ?????? 
45.     * @param low  
46.     * @param high 
47.     * @return ??????low????,???????????? 
48.     */  
49.    public static int partition(int array[],int low,int high)  
50.    {  
51.        //????????????????,????????????????  
52.        int pivotKey = array[low];  
53.        int i=low,j=high;  
54.  
55.        if(low<high)  
56.        {  
57.            while(i<j)  
58.            {  
59.                //??????,??array[j]>=pivotKey,???j????  
60.                while(i<j&&array[j]>=pivotKey)  
61.                {  
62.                    j--;  
63.                }  
64.                //array[j]<pivotKey,??array[j]?????array[i],????pivotKey?????  
65.                if(i<j)  
66.                {  
67.                    array[i]=array[j];  
68.                    i++;  
69.                }  
70.                  
71.                //??array[i]<=pivotKey,???i????  
72.                while(i<j&&array[i]<=pivotKey)  
73.                {  
74.                    i++;  
75.                }  
76.                //arry[i]>pivotKey,?array[i]??????????array[j]  
77.                if(i<j)  
78.                {  
79.                    array[j]=array[i];  
80.                    j--;  
81.                }  
82.            }  
83.            //?????i=j???,??????????,??????????????????array[i]  
84.            array[i]=pivotKey;  
85.      
86.        }  
87.        //??????????  
88.        System.out.println(Arrays.toString(array));  
89.        //???????????i??,????????????????,?????????  
90.        return i;  
91.    }  
92.}  
 ????:
Java??  
1.<span style="color: #ff0000;">[49, 38, 65, 97, 76, 13, 27, 49]??????</span><span style="color: #333333;">  
2.[27, 38, 13, 49, 76, 97, 65, 49]???  
3.[13, 27, 38, 49, 76, 97, 65, 49]???  
4.[13, 27, 38, 49, 49, 65, 76, 97]???  
5.[13, 27, 38, 49, 49, 65, 76, 97]???  
6.[13, 27, 38, 49, 49, 65, 76, 97]???</span>  
 